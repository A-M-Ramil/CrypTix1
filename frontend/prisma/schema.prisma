// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  pub_key   String   @unique
  Pub       Customer @relation(fields: [pub_key], references: [public_key])
}

model Customer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  public_key String   @unique
  user       Users?
}

model Sports {
  id                  Int      @id @default(autoincrement())
  name                String   @unique
  sport_seat_capacity Int
  seat_available      Int
  schedule            DateTime
  venue               String
  team1               String
  team2               String
  ticket_price        Int
  ticket              Ticket[]
}

model Concert {
  id                    Int      @id @default(autoincrement())
  name                  String   @unique
  concert_seat_capacity Int
  seat_available        Int
  schedule              DateTime
  venue                 String
  artist                String
  ticket_price          Int

  ticket Ticket[]
}

model Ticket {
  id Int @id @default(autoincrement())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  concert    Concert? @relation(fields: [concert_id], references: [id])
  concert_id Int?

  sport    Sports? @relation(fields: [sport_id], references: [id])
  sport_id Int?

  price Int
}

model Owner {
  id      Int    @id @default(autoincrement())
  pub_key String @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
